function val = loadfun( p )

% LOADFUN
%   The load function of the PDE: curl curl u + u = f .
%
% SYNTAX:  val = loadfun( p )
%
% IN:   p      vector defining the points
%
% OUT:  val    values of the function f on points p
%

% make jumps
JUMP11 = jump('diagonal',NaN,p,'reverse');
JUMP21 = jump('diagonal',NaN,p,'reverse');

val(:,1) = JUMP11.*(sin(2.*pi.*p(:,1)) + 2.*pi.*cos(2.*pi.*p(:,1)).*(p(:,1) - p(:,2))) - JUMP21.*(cos(p(:,2).*(p(:,1) - p(:,2)).^2.*(p(:,1) - 1).^2).*(2.*p(:,2).*(p(:,1) - 1).^2 - (2.*p(:,1) - 2.*p(:,2)).*(p(:,1) - 1).^2 - (2.*p(:,1) - 2).*(p(:,1) - p(:,2)).^2 + p(:,2).*(2.*p(:,1) - 2.*p(:,2)).*(2.*p(:,1) - 2)) + sin(p(:,2).*(p(:,1) - p(:,2)).^2.*(p(:,1) - 1).^2).*((p(:,1) - p(:,2)).^2.*(p(:,1) - 1).^2 - p(:,2).*(2.*p(:,1) - 2.*p(:,2)).*(p(:,1) - 1).^2).*(p(:,2).*(2.*p(:,1) - 2.*p(:,2)).*(p(:,1) - 1).^2 + p(:,2).*(2.*p(:,1) - 2).*(p(:,1) - p(:,2)).^2));
val(:,2) = JUMP21.*(sin(p(:,2).*(p(:,1) - p(:,2)).^2.*(p(:,1) - 1).^2) - sin(2.*pi.*p(:,1))) + JUMP21.*sin(p(:,2).*(p(:,1) - p(:,2)).^2.*(p(:,1) - 1).^2).*(p(:,2).*(2.*p(:,1) - 2.*p(:,2)).*(p(:,1) - 1).^2 + p(:,2).*(2.*p(:,1) - 2).*(p(:,1) - p(:,2)).^2).^2 - JUMP21.*cos(p(:,2).*(p(:,1) - p(:,2)).^2.*(p(:,1) - 1).^2).*(2.*p(:,2).*(p(:,1) - 1).^2 + 2.*p(:,2).*(p(:,1) - p(:,2)).^2 + 2.*p(:,2).*(2.*p(:,1) - 2.*p(:,2)).*(2.*p(:,1) - 2)) + 4.*JUMP11.*pi.^2.*sin(2.*pi.*p(:,1)) - 4.*JUMP21.*pi.^2.*sin(2.*pi.*p(:,1));